// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Image {
  id			String		@default(cuid()) @id
  createdAt		DateTime	@default(now())
  ownerEmail	String?
  owner			User?		@relation("UserImages", fields: [ownerEmail], references: [email])
  isPfp			User?		@relation("PfpImage")
  isPublic		Boolean		@default(false) @map(name: "is_public")
  file			Bytes
  @@map(name: "images")
}

enum UserRole {
	UNVERIFIED
	ADMIN
	USER
}
model User {
  name          	String
  imageid			String?		@unique
  email         	String		@id
  role				UserRole	@default(UNVERIFIED)

  points			Float		@default(0.0)

  phoneVerified		Boolean		@default(false) @map(name: "phone_verified")
  emailVerified		Boolean		@default(false) @map(name: "email_verified")
  password			String?
  googleId			String?		@unique @map(name: "google_id")

  address1			String?
  address2			String?
  city				String?
  country			String?
  mobileno			String?		@unique

  createdAt     	DateTime	@default(now()) @map(name: "created_at")
  updatedAt     	DateTime	@updatedAt @map(name: "updated_at")

  transactions		Transaction[]
  rel_image			Image?		@relation("PfpImage", fields: [imageid], references: [id])
  images			Image[]		@relation("UserImages")
  reports			ProductReport[]
  
  cartId			String		@unique @map(name: "cart_id")
  cart				Cart		@relation(fields: [cartId], references: [id])
  
  @@map(name: "users")
}
model Cart {
  id		String		@id	@default(cuid())
  items		CartItem[]
  owner		User?
  @@map(name: "carts")
}
model CartItem {
  cartId		String
  productId		Int
  quantity		Int
  updatedAt		DateTime	@updatedAt

  product		Product		@relation(fields: [productId], references: [id])
  cart			Cart		@relation(fields: [cartId], references: [id])
  @@map(name: "cart_items")
  @@id([cartId, productId])
}
model ProductReport {
  id			Int			@id @default(autoincrement())
  createdAt		DateTime	@default(now())
  updatedAt		DateTime	@updatedAt

  userEmail		String
  code			String
  productId		Int
  comment		String

  user			User		@relation(fields: [userEmail], references: [email])
  rel_code		CodeH		@relation(fields: [productId, code], references: [productId, code])
  
  @@map(name: "product_reports")
}

// shop having a version doesn't make sense
// so it just points to the current active shop
model Shop {
  id		Int			@unique

  name		String		@id

  shop		ShopH		@relation(fields: [id, name], references: [id, name])
  products	Product[]
  @@map(name: "shops")
  @@unique([id, name])
}
model ShopH {
  id			Int			@default(autoincrement()) @id
  createdAt		DateTime	@default(now())
  updatedAt		DateTime	@updatedAt

  name			String
  img_src		String		@default("")

  isActive  	Shop?
  products		ProductH[]
  @@map(name: "shops_h")
  @@unique([id, name])
}

enum ProductCategory {
  BF // @map("Beauty & Fashion")
  DS // @map("Department Stores")
  EL // @map("Electronics")
  FD // @map("Food & Drinks")
  GM // @map("Gaming")
  HB // @map("Hobbies")
  LS // @map("Lifestyle")
  TR // @map("Travel")
  OS // @map("Online Shopping")
}

model Product {
  id				Int		@unique
  version			Int
	
  name				String
  shopId			Int
  shopName			String

  product			ProductH	@relation(fields: [id, version, name, shopId], references: [id, version, name, shopId])
  shop				Shop		@relation(fields: [shopId, shopName], references: [id, name], onDelete: Cascade)
  codes				Code[]
  purchasedCodes	CodeH[]
  rel_cart			CartItem[]

  @@id([name, shopName])
  @@map(name: "products")
  @@unique([id, version, name, shopId])
  @@unique([id, name, shopId, shopName])
}
model ProductH {
  id			Int			@default(autoincrement())
  version		Int			@default(0)
  dateCreated	DateTime	@default(now())
  shopId		Int

  name			String
  price			Float
  tos			String
  details		String
  category		ProductCategory?	// TODO: fix this
  
  isActive		Product?
  shop			ShopH		@relation(fields: [shopId], references: [id])
  purchasedCodes	CodeH[]

  @@id([id, version])
  @@map(name: "products_h")
  @@unique([id, version, name, shopId])
  @@unique([id, version, shopId])
}

// unpurchased codes use the current version
// only purchased codes are tied to a specific version
// purchased codes also should not be visible to the user
// only here for unique constraints
model Code {
  shopId		Int
  productId		Int
  productName	String

  code			String
  shopName		String		@map(name: "shop_name")
  
  isUsed		CodeH?
  product		Product		@relation(fields: [productId, productName, shopId, shopName], references: [id, name, shopId, shopName])

  @@unique([code, shopId])
  @@id([code, shopName])
  @@map(name: "codes")
}
model CodeH {
	shopId			Int
	productId		Int
	productVersion	Int
	transactionId	String
	code			String
	isRedeemed		Boolean		@default(false)

	transaction		Transaction	@relation(fields: [transactionId], references: [id])
	rel_code		Code?		@relation(fields: [code, shopId], references: [code, shopId])
	rel_purchases	Product?	@relation(fields: [productId], references: [id])
	rel_product		ProductH	@relation(fields: [productId, productVersion, shopId], references: [id, version, shopId])
	reports			ProductReport[]
	@@id([code, shopId])
	@@unique([code, productId])
}

model Transaction {
  id			String		@default(cuid()) @id
  date          DateTime	@default(now())
  userEmail     String
  user          User		@relation(fields: [userEmail], references: [email])

  type          TransactionType
  total         Float
  pointsBalance Int

  items      	CodeH[]
  @@map(name: "transactions")
}

enum TransactionType {
  DEPOSIT
  PURCHASE
}